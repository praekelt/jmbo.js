// Generated by CoffeeScript 1.3.1
(function() {
  var NavigationControllerView, TitleView, ViewController, ViewControllerView, ViewControllers,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  TitleView = (function(_super) {

    __extends(TitleView, _super);

    TitleView.name = 'TitleView';

    function TitleView() {
      this.setTitle = __bind(this.setTitle, this);

      this.render = __bind(this.render, this);
      return TitleView.__super__.constructor.apply(this, arguments);
    }

    TitleView.prototype.className = 'jmbo-title-view';

    TitleView.prototype.initialize = function() {
      this.template = _.template('<h1><%= title %></h1>');
      return this.title = 'Untitled';
    };

    TitleView.prototype.render = function() {
      return this.$el.html(this.template({
        title: this.title
      }));
    };

    TitleView.prototype.setTitle = function(title) {
      return this.title = title;
    };

    return TitleView;

  })(Backbone.View);

  ViewController = (function(_super) {

    __extends(ViewController, _super);

    ViewController.name = 'ViewController';

    function ViewController() {
      return ViewController.__super__.constructor.apply(this, arguments);
    }

    ViewController.prototype.defaults = {
      titleView: TitleView,
      childView: null,
      title: '',
      animation: 'slide',
      cacheViewDOM: false,
      _view: null
    };

    return ViewController;

  })(Backbone.Model);

  ViewControllers = (function(_super) {

    __extends(ViewControllers, _super);

    ViewControllers.name = 'ViewControllers';

    function ViewControllers() {
      return ViewControllers.__super__.constructor.apply(this, arguments);
    }

    ViewControllers.prototype.model = ViewController;

    return ViewControllers;

  })(Backbone.Collection);

  ViewControllerView = (function(_super) {

    __extends(ViewControllerView, _super);

    ViewControllerView.name = 'ViewControllerView';

    function ViewControllerView() {
      this.animate = __bind(this.animate, this);

      this.render = __bind(this.render, this);
      return ViewControllerView.__super__.constructor.apply(this, arguments);
    }

    ViewControllerView.prototype.className = 'jmbo-view-controller-view';

    ViewControllerView.prototype.render = function() {
      var childView, titleView;
      if (!(this.model != null)) {
        return false;
      }
      titleView = new (this.model.get('titleView'));
      titleView.setTitle(this.model.get('title'));
      this.$el.append(titleView.render());
      childView = this.model.get('childView');
      if (!(childView != null)) {
        return false;
      }
      this.$el.append(this.model.get('childView').render());
      return this.el;
    };

    ViewControllerView.prototype.animate = function(name, callback) {
      return jmbo.view.animate(this.$el, name, callback);
    };

    return ViewControllerView;

  })(Backbone.View);

  NavigationControllerView = (function(_super) {

    __extends(NavigationControllerView, _super);

    NavigationControllerView.name = 'NavigationControllerView';

    function NavigationControllerView() {
      this.pushViewController = __bind(this.pushViewController, this);

      this.popViewController = __bind(this.popViewController, this);

      this.render = __bind(this.render, this);
      return NavigationControllerView.__super__.constructor.apply(this, arguments);
    }

    NavigationControllerView.prototype.className = 'jmbo-navigation-controller-view';

    NavigationControllerView.prototype.initialize = function() {
      return this.collection = new ViewControllers;
    };

    NavigationControllerView.prototype.render = function() {
      this.$el.html('');
      return this.el;
    };

    NavigationControllerView.prototype.popViewController = function(animation) {
      var currentVC, currentVC_view, prevVC, prevVC_view;
      currentVC = this.collection.pop();
      if (!(currentVC != null)) {
        return null;
      }
      currentVC_view = currentVC.get('_view');
      currentVC_view.animate(currentVC.get('animation'), 'left-out', function() {
        if (!currentVC.get('cacheViewDOM')) {
          return currentVC_view.$el.html('').remove();
        }
      });
      if (this.collection.length > 0) {
        prevVC = this.collection.last();
        prevVC_view = new ViewControllerView({
          model: prevVC
        });
        prevVC.set({
          _view: prevVC_view
        });
        this.$el.prepend(prevVC_view.render());
        prevVC_view.animate(prevVC.get('animation'), 'left-in');
      }
      return currentVC;
    };

    NavigationControllerView.prototype.pushViewController = function(nextVC, animation) {
      var currentVC, currentVC_view, nextVC_view;
      if (animation == null) {
        animation = 'slide';
      }
      if (this.collection.length > 0) {
        currentVC = this.collection.last();
        currentVC_view = currentVC.get('_view');
        currentVC_view.animate(currentVC.get('animation'), 'right-out', function() {
          if (!currentVC.get('cacheViewDOM')) {
            currentVC_view.$el.html('').remove();
            return currentVC.unset('_view');
          }
        });
      }
      this.collection.add(nextVC);
      nextVC_view = new ViewControllerView({
        model: nextVC
      });
      nextVC.set({
        _view: nextVC_view
      });
      this.$el.append(nextVC_view.render());
      nextVC_view.animate(nextVC.get('animation'), 'right-in');
      return nextVC;
    };

    return NavigationControllerView;

  })(Backbone.View);

  namespace('jmbo.view', function(exports) {
    exports.Controller = ViewController;
    exports._ControllerView = ViewControllerView;
    exports.TitleView = TitleView;
    return exports.animate = function($el, name, direction, callback) {
      var className;
      className = name + '-' + direction;
      l(className);
      $el.addClass(className);
      return $el.on('webkitAnimationEnd', function() {
        $el.removeClass(className).off('webkitAnimationEnd');
        if (callback) {
          return callback();
        }
      });
    };
  });

  namespace('jmbo.navigation', function(exports) {
    return exports.ControllerView = NavigationControllerView;
  });

}).call(this);
