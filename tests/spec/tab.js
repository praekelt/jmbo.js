// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  describe("TabView", function() {
    var tabView, testView;
    tabView = void 0;
    testView = void 0;
    beforeEach(function() {
      var TestView;
      tabView = new Jmbo.TabView;
      TestView = (function(_super) {

        __extends(TestView, _super);

        function TestView() {
          this.render = __bind(this.render, this);
          return TestView.__super__.constructor.apply(this, arguments);
        }

        TestView.prototype.render = function() {
          this.$el.html('Pew.Pew.Pew.');
          return this;
        };

        return TestView;

      })(Backbone.View);
      return testView = new TestView();
    });
    describe("Initialization", function() {
      it("Creates an empty collection if one isn't provided", function() {
        return expect(tabView.collection).toBeDefined();
      });
      return it("Accepts a collection as a parameter", function() {
        var collection, t;
        collection = new Backbone.Collection;
        t = new Jmbo.TabView({
          collection: collection
        });
        return expect(t.collection).toBe(collection);
      });
    });
    describe("Rendering", function() {
      it("Updates the DOM when views are added.", function() {
        var $el, view_name;
        $el = $('<div/>');
        $el.html(tabView.render().el);
        expect($el.find('.jmbo-bar-view li').length).toEqual(0);
        view_name = 'Test View';
        tabView.add({
          view: testView,
          name: view_name
        });
        return expect($el.find('.jmbo-bar-view li').text()).toEqual(view_name);
      });
      return it("Updates the DOM when views are removed/ reset", function() {
        var $el;
        $el = $('<div/>');
        $el.html(tabView.render().el);
        tabView.add({
          view: testView
        });
        expect($el.find('.jmbo-bar-view li').length).toEqual(1);
        tabView.reset();
        expect($el.find('.jmbo-bar-view li').length).toEqual(0);
        tabView.add({
          view: testView
        });
        expect($el.find('.jmbo-bar-view li').length).toEqual(1);
        tabView.removeAtIndex(0);
        return expect($el.find('.jmbo-bar-view li').length).toEqual(0);
      });
    });
    return describe("Tab Bar", function() {
      it("Select view when element is clicked", function() {
        var $el;
        $el = $('<div/>');
        $el.html(tabView.render().el);
        tabView.add({
          view: testView
        });
        expect($el.find('.jmbo-bar-view li').length).toEqual(1);
        $el.find('.jmbo-bar-view li').eq(0).click();
        return expect(tabView.collection.at(0).get('selected')).toEqual(true);
      });
      it("Render view in context when element is clicked", function() {
        var $el;
        $el = $('<div/>');
        $el.html(tabView.render().el);
        tabView.add({
          view: testView
        });
        $el.find('.jmbo-bar-view li').eq(0).click();
        return expect($el.find('.jmbo-tab-view-context').text()).toEqual(testView.$el.text());
      });
      it("Not remove from context with `removeFromDOM` and clicked", function() {
        var $el, SecondView, secondView;
        $el = $('<div/>');
        $el.html(tabView.render().el);
        tabView.add({
          view: testView
        });
        SecondView = (function(_super) {

          __extends(SecondView, _super);

          function SecondView() {
            this.render = __bind(this.render, this);
            return SecondView.__super__.constructor.apply(this, arguments);
          }

          SecondView.prototype.render = function() {
            this.$el.html('Pew2.Pew2.Pew2.');
            return this;
          };

          return SecondView;

        })(Backbone.View);
        secondView = new SecondView();
        tabView.add({
          view: secondView,
          removeFromDOM: false
        });
        $el.find('.jmbo-bar-view li').eq(0).click();
        expect($el.find('.jmbo-tab-view-context').text()).toEqual(testView.$el.text());
        $el.find('.jmbo-bar-view li').eq(1).click();
        return expect($el.find('.jmbo-tab-view-context').text()).toEqual(testView.$el.text() + secondView.$el.text());
      });
      return it("Execute callback when `func` is specified", function() {
        var $el, callback;
        callback = jasmine.createSpy('tab func push');
        $el = $('<div/>');
        $el.html(tabView.render().el);
        tabView.add({
          view: testView,
          func: callback
        });
        $el.find('.jmbo-bar-view li').eq(0).click();
        expect($el.find('.jmbo-tab-view-context').text()).toEqual(testView.$el.text());
        return expect(callback).wasCalled();
      });
    });
  });

}).call(this);
