// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  describe("StackView", function() {
    var stackView;
    stackView = void 0;
    beforeEach(function() {
      return stackView = new Jmbo.StackView({
        pushDefaults: {
          animation: false
        },
        popDefaults: {
          animation: false
        }
      });
    });
    describe("Initialization", function() {
      it("Creates an empty collection if one isn't provided", function() {
        return expect(stackView.collection).toBeDefined();
      });
      it("Accepts a collection as a parameter", function() {
        var collection, s;
        collection = new Backbone.Collection;
        s = new Jmbo.StackView({
          collection: collection
        });
        return expect(s.collection).toBe(collection);
      });
      return it("Push/ Pop defaults shouldn't be overwritten", function() {
        return expect(stackView.options.pushDefaults.animation).toBe(false);
      });
    });
    describe("Pushing views", function() {
      var newView;
      newView = void 0;
      beforeEach(function() {
        var TestView;
        TestView = (function(_super) {

          __extends(TestView, _super);

          function TestView() {
            this.render = __bind(this.render, this);
            return TestView.__super__.constructor.apply(this, arguments);
          }

          TestView.prototype.render = function() {
            this.$el.html('Pew.Pew.Pew.');
            return this;
          };

          return TestView;

        })(Backbone.View);
        return newView = new TestView();
      });
      it("Add it to the collection", function() {
        stackView.push(newView);
        return expect(stackView.collection.last().get('view')).toBe(newView);
      });
      it("Render the view on `render()`", function() {
        stackView.push(newView);
        return expect(stackView.render().$el.find('div').eq(0).text()).toEqual(newView.$el.text());
      });
      it("Not remove the previous view from DOM when `removeFromDOM` is false", function() {
        var $divs, AnotherView, anotherView;
        stackView.push(newView);
        AnotherView = (function(_super) {

          __extends(AnotherView, _super);

          function AnotherView() {
            this.render = __bind(this.render, this);
            return AnotherView.__super__.constructor.apply(this, arguments);
          }

          AnotherView.prototype.render = function() {
            this.$el.html('Margle.');
            return this;
          };

          return AnotherView;

        })(Backbone.View);
        anotherView = new AnotherView();
        stackView.push(anotherView, {
          removeFromDOM: false
        });
        expect(stackView.collection.last().get('view')).toBe(anotherView);
        stackView.render();
        $divs = stackView.$el.find('div');
        expect($divs.length).toEqual(2);
        return stackView.collection.each(function(sv, i) {
          var v;
          v = sv.get('view');
          return expect($divs.eq(i).text()).toEqual(v.$el.text());
        });
      });
      return it("Executes animation callback", function() {
        var callback_push;
        callback_push = jasmine.createSpy('stack push');
        stackView.push(new Backbone.View, {
          callback: callback_push
        });
        return expect(callback_push).wasCalled();
      });
    });
    describe("Popping views", function() {
      it("Remove a view from the collection", function() {
        stackView.push(new Backbone.View);
        stackView.pop();
        return expect(stackView.collection.length).toEqual(0);
      });
      return it("Execute animation callback", function() {
        var callback_pop;
        callback_pop = jasmine.createSpy('stack pop');
        stackView.push(new Backbone.View, {
          callback: callback_pop
        });
        return expect(callback_pop).wasCalled();
      });
    });
    return describe("Rendering", function() {
      it("Should even `render()` when the collection is empty", function() {
        var $el;
        expect(stackView.collection.length).toEqual(0);
        $el = $(stackView.render().el);
        return expect($el.text()).toEqual('');
      });
      return it("Rerender when collection is reset", function() {
        var TestView1, TestView2, newView1, newView2;
        TestView1 = (function(_super) {

          __extends(TestView1, _super);

          function TestView1() {
            this.render = __bind(this.render, this);
            return TestView1.__super__.constructor.apply(this, arguments);
          }

          TestView1.prototype.render = function() {
            this.$el.html('Pew.Pew.Pew.');
            return this;
          };

          return TestView1;

        })(Backbone.View);
        newView1 = new TestView1();
        stackView.push(newView1);
        expect(stackView.render().$el.find('div').eq(0).text()).toEqual(newView1.$el.text());
        TestView2 = (function(_super) {

          __extends(TestView2, _super);

          function TestView2() {
            this.render = __bind(this.render, this);
            return TestView2.__super__.constructor.apply(this, arguments);
          }

          TestView2.prototype.render = function() {
            this.$el.html('Margle.');
            return this;
          };

          return TestView2;

        })(Backbone.View);
        newView2 = new TestView2();
        stackView.push(newView2);
        stackView.collection.reset(new Backbone.Model({
          view: newView2
        }));
        return expect(stackView.$el.find('div').eq(0).text()).toEqual(newView2.$el.text());
      });
    });
  });

}).call(this);
