// Generated by CoffeeScript 1.3.3
(function() {
  var ControllerView,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  ControllerView = (function(_super) {

    __extends(ControllerView, _super);

    function ControllerView() {
      this.pop = __bind(this.pop, this);

      this.push = __bind(this.push, this);

      this.firePostRenderEvent = __bind(this.firePostRenderEvent, this);

      this.render = __bind(this.render, this);
      return ControllerView.__super__.constructor.apply(this, arguments);
    }

    ControllerView.prototype.className = 'jmbo-ui-stack-controller-view';

    ControllerView.prototype.initialize = function() {
      ControllerView.__super__.initialize.apply(this, arguments);
      return this.collection = new jmbo.ui.view.Controllers;
    };

    ControllerView.prototype.render = function() {
      var controller, controllers, view, _i, _len;
      controllers = this.collection.where({
        _cache: true
      });
      if (this.collection.last() != null) {
        controllers.push(this.collection.last());
      }
      this.$el.html('');
      for (_i = 0, _len = controllers.length; _i < _len; _i++) {
        controller = controllers[_i];
        view = controller.get('view');
        this.$el.append(view.render());
      }
      return this.el;
    };

    ControllerView.prototype.firePostRenderEvent = function() {
      var controller, controllers, view, _i, _len, _results;
      controllers = this.collection.where({
        _cache: true
      });
      if (this.collection.last() != null) {
        controllers.push(this.collection.last());
      }
      _results = [];
      for (_i = 0, _len = controllers.length; _i < _len; _i++) {
        controller = controllers[_i];
        view = controller.get('view');
        _results.push(view.firePostRenderEvent());
      }
      return _results;
    };

    ControllerView.prototype.push = function(newView, opts) {
      var controller, currentView, defaultOpts;
      defaultOpts = {
        animation: 'slide-right',
        removeFromDom: true
      };
      opts = _.extend(defaultOpts, opts);
      controller = this.collection.last();
      if (controller != null) {
        currentView = controller.get('view');
        currentView.animate(opts.animation, 'out', function() {
          controller.set('_cache', !opts.removeFromDom);
          if (opts.removeFromDom) {
            return currentView.$el.html('').remove();
          }
        });
      }
      this.collection.add({
        'view': newView
      });
      this.$el.append(newView.render());
      newView.animate(opts.animation, 'in', function() {
        newView.firePostRenderEvent();
        if (opts.callback) {
          return opts.callback();
        }
      });
      return newView;
    };

    ControllerView.prototype.pop = function(opts) {
      var controller, currentView, defaultOptions, newView;
      defaultOptions = {
        animation: 'slide-left'
      };
      opts = _.extend(defaultOptions, opts);
      controller = this.collection.pop();
      if (controller != null) {
        currentView = controller.get('view');
        currentView.animate(opts.animation, 'out', function() {
          currentView.$el.html('').remove();
          if (opts.callback) {
            return opts.callback();
          }
        });
      }
      controller = this.collection.last();
      if (controller != null) {
        newView = controller.get('view');
        if (!controller.get('_cache')) {
          this.$el.append(newView.render());
          newView.firePostRenderEvent();
        }
        newView.animate(opts.animation, 'in');
      }
      return currentView;
    };

    return ControllerView;

  })(jmbo.ui.view.ControllerView);

  namespace('jmbo.ui.stack', function(exports) {
    return exports.ControllerView = ControllerView;
  });

}).call(this);
