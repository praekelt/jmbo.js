// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  describe("StackView", function() {
    var stackView;
    stackView = void 0;
    beforeEach(function() {
      return stackView = new Jmbo.StackView({
        pushDefaults: {
          animation: false
        },
        popDefaults: {
          animation: false
        }
      });
    });
    describe("Initialization", function() {
      it("Create an empty collection if one isn't provided", function() {
        return expect(stackView.collection).toBeDefined();
      });
      it("Accept a collection as a parameter", function() {
        var collection, s;
        collection = new Backbone.Collection;
        s = new Jmbo.StackView({
          collection: collection
        });
        return expect(s.collection).toBe(collection);
      });
      return it("Push/ Pop defaults shouldn't be overwritten", function() {
        return expect(stackView.options.pushDefaults.animation).toBe(false);
      });
    });
    describe("Pushing a view", function() {
      var newView;
      newView = void 0;
      beforeEach(function() {
        var TestView;
        TestView = (function(_super) {

          __extends(TestView, _super);

          function TestView() {
            this.render = __bind(this.render, this);
            return TestView.__super__.constructor.apply(this, arguments);
          }

          TestView.prototype.render = function() {
            this.$el.html('Pew.Pew.Pew.');
            return this;
          };

          return TestView;

        })(Backbone.View);
        return newView = new TestView();
      });
      it("Add it to the collection", function() {
        stackView.push(newView);
        return expect(stackView.collection.last().get('view')).toBe(newView);
      });
      it("Render that view on `render()`", function() {
        stackView.push(newView);
        return expect(stackView.render().$el.find('div').eq(0).text()).toEqual(newView.$el.text());
      });
      it("Not remove the previous view from DOM when `removeViewFromDOM` is false", function() {
        var $divs, AnotherView, anotherView;
        stackView.push(newView);
        AnotherView = (function(_super) {

          __extends(AnotherView, _super);

          function AnotherView() {
            this.render = __bind(this.render, this);
            return AnotherView.__super__.constructor.apply(this, arguments);
          }

          AnotherView.prototype.render = function() {
            this.$el.html('Margle.');
            return this;
          };

          return AnotherView;

        })(Backbone.View);
        anotherView = new AnotherView();
        stackView.push(anotherView, {
          removeViewFromDOM: false
        });
        expect(stackView.collection.last().get('view')).toBe(anotherView);
        stackView.render();
        $divs = stackView.$el.find('div');
        expect($divs.length).toEqual(2);
        return stackView.collection.each(function(sv, i) {
          var v;
          v = sv.get('view');
          return expect($divs.eq(i).text()).toEqual(v.$el.text());
        });
      });
      it("Executes animation in callback", function() {});
      return it("Executes animation out callback", function() {});
    });
    describe("Popping views", function() {
      it("Remove a view from the collection", function() {});
      return it("Execute animation callback", function() {});
    });
    return describe("Rendering", function() {
      it("Shouldn't render when the collection is empty", function() {});
      it("Rerender when collection is reset", function() {});
      return it("Render the last view in the collection", function() {});
    });
  });

}).call(this);
