// Generated by CoffeeScript 1.3.3
(function() {

  describe("StackView", function() {
    var stackView;
    stackView = void 0;
    beforeEach(function() {
      return stackView = new Jmbo.StackView;
    });
    describe("Initialization", function() {
      it("Create an empty collection if one isn't provided", function() {
        return expect(stackView.collection).toBeDefined();
      });
      return it("Accept a collection as a parameter", function() {
        var collection, s;
        collection = new Backbone.Collection;
        s = new Jmbo.StackView({
          collection: collection
        });
        return expect(s.collection).toBe(collection);
      });
    });
    describe("Pushing a view", function() {
      var newView;
      newView = void 0;
      beforeEach(function() {
        newView = new Backbone.View;
        return newView.$el.html('<b id="find-me">Find me</b>');
      });
      it("Add it to the collection", function() {
        stackView.push(newView, {
          animation: false
        });
        return expect(stackView.collection.last().get('view')).toBe(newView);
      });
      it("Render that view on `render()`", function() {
        stackView.push(newView, {
          animation: false
        });
        expect(stackView.collection.last().get('view')).toBe(newView);
        return stackView.render();
      });
      it("Not remove the previous view from DOM when `removeFromDOM` is false", function() {});
      return it("Execute animation callback", function() {});
    });
    describe("Popping views", function() {
      it("Remove a view from the collection", function() {});
      return it("Execute animation callback", function() {});
    });
    return describe("Rendering", function() {
      it("Shouldn't render when the collection is empty", function() {});
      it("Rerender when collection is reset", function() {});
      return it("Render the last view in the collection", function() {});
    });
  });

}).call(this);
