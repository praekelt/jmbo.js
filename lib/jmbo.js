// Generated by CoffeeScript 1.3.3
(function() {
  var BarItemView, BarView, ListItemView, ListView, StackView, StackViewVessel, StackViewVessels, TabView, TabViewVessel, TabViewVessels, TitleView, animate, exports, _ref, _ref1, _ref2,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __slice = [].slice,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  StackViewVessel = (function(_super) {

    __extends(StackViewVessel, _super);

    function StackViewVessel() {
      return StackViewVessel.__super__.constructor.apply(this, arguments);
    }

    return StackViewVessel;

  })(Backbone.Model);

  StackViewVessels = (function(_super) {

    __extends(StackViewVessels, _super);

    function StackViewVessels() {
      return StackViewVessels.__super__.constructor.apply(this, arguments);
    }

    StackViewVessels.prototype.model = StackViewVessel;

    return StackViewVessels;

  })(Backbone.Collection);

  animate = function($el, animation, direction, callback) {
    var className, eventName;
    className = "" + animation + "-" + direction;
    eventName = "animation-event-" + className;
    $el.one(eventName, function() {
      $el.removeClass(className);
      return typeof callback === "function" ? callback() : void 0;
    });
    if (animation === false) {
      $el.trigger(eventName);
      return;
    }
    $el.on('webkitAnimationEnd animationEnd', function() {
      return $el.trigger(eventName);
    });
    return $el.addClass(className);
  };

  StackView = (function(_super) {

    __extends(StackView, _super);

    function StackView() {
      this.pop = __bind(this.pop, this);

      this.push = __bind(this.push, this);

      this.render = __bind(this.render, this);
      return StackView.__super__.constructor.apply(this, arguments);
    }

    /*
        A stack is a collection of nested views. The views can be pushed and popped
        off the stack. The stack can:
    
          * Transition views with CSS animations
          * Keeps track of which state.
          * Can cache elements in the DOM.
    */


    StackView.prototype.className = 'jmbo-stack-view';

    StackView.prototype.initialize = function() {
      if (!(this.collection != null)) {
        this.collection = new StackViewVessels;
      }
      this.options.pushDefaults = _.extend({
        animation: 'slide-right',
        removeFromDOM: true
      }, this.options.pushDefaults);
      return this.options.popDefaults = _.extend({
        animation: 'slide-left'
      }, this.options.popDefaults);
    };

    StackView.prototype.render = function() {
      var viewVessel, viewVessels, _i, _len;
      viewVessels = this.collection.where({
        _cache: true
      });
      if (this.collection.last()) {
        viewVessels.push(this.collection.last());
      }
      this.$el.contents().detach();
      for (_i = 0, _len = viewVessels.length; _i < _len; _i++) {
        viewVessel = viewVessels[_i];
        this.$el.append(viewVessel.get('view').render().el);
      }
      return this;
    };

    StackView.prototype.push = function(newView, options) {
      var currentView, currentViewVessel, opts;
      opts = _.extend(this.options.pushDefaults, options);
      currentViewVessel = this.collection.last();
      if (currentViewVessel != null) {
        currentView = currentViewVessel.get('view');
        animate(currentView.$el, opts.animation, 'out', function() {
          if (!opts.removeFromDOM) {
            return currentViewVessel.set({
              '_cache': !opts.removeFromDOM
            });
          } else {
            return currentView.$el.detach();
          }
        });
      }
      this.collection.add({
        'view': newView
      });
      newView.stackView = this;
      this.$el.append(newView.render().el);
      return animate(newView.$el, opts.animation, 'in', function() {
        return typeof opts.callback === "function" ? opts.callback() : void 0;
      });
    };

    StackView.prototype.pop = function(options) {
      var currentView, newView, newViewVessel, opts, _ref;
      opts = _.extend(this.options.popDefaults, options);
      currentView = (_ref = this.collection.pop()) != null ? _ref.get('view') : void 0;
      animate(currentView.$el, opts.animation, 'out', function() {
        delete currentView.stackView;
        currentView.$el.remove();
        return typeof opts.callback === "function" ? opts.callback() : void 0;
      });
      newViewVessel = this.collection.last();
      if (newViewVessel != null) {
        newView = newViewVessel.get('view');
        if (!newViewVessel.get('_cache')) {
          this.$el.append(newView.render().el);
        }
        return animate(newView.$el, opts.animation, 'in');
      }
    };

    return StackView;

  })(Backbone.View);

  exports = this;

  exports.Jmbo = (_ref = exports.Jmbo) != null ? _ref : {};

  exports.Jmbo.StackView = StackView;

  TabViewVessel = (function(_super) {

    __extends(TabViewVessel, _super);

    function TabViewVessel() {
      return TabViewVessel.__super__.constructor.apply(this, arguments);
    }

    TabViewVessel.prototype.defaults = {
      icon: '',
      name: 'Unnamed',
      view: void 0,
      removeFromDOM: true,
      func: void 0
    };

    return TabViewVessel;

  })(Backbone.Model);

  TabViewVessels = (function(_super) {

    __extends(TabViewVessels, _super);

    function TabViewVessels() {
      return TabViewVessels.__super__.constructor.apply(this, arguments);
    }

    TabViewVessels.prototype.model = TabViewVessel;

    return TabViewVessels;

  })(Backbone.Collection);

  TabView = (function(_super) {

    __extends(TabView, _super);

    function TabView() {
      this.selectAtIndex = __bind(this.selectAtIndex, this);

      this.removeAtIndex = __bind(this.removeAtIndex, this);

      this.reset = __bind(this.reset, this);

      this.add = __bind(this.add, this);

      this.renderSelected = __bind(this.renderSelected, this);

      this.render = __bind(this.render, this);
      return TabView.__super__.constructor.apply(this, arguments);
    }

    TabView.prototype.className = 'jmbo-tab-view';

    TabView.prototype.initialize = function() {
      if (!(this.collection != null)) {
        this.collection = new TabViewVessels;
      }
      return this.collection.on('change:selected', this.renderSelected);
    };

    TabView.prototype.render = function() {
      var selectedView;
      this.$el.contents().detach();
      this.$context = $('<div class="jmbo-tab-view-context"></div>');
      this.$el.append(this.$context);
      this.barView = new BarView({
        collection: this.collection
      });
      this.$el.append(this.barView.render().el);
      selectedView = this.collection.where({
        'selected': true
      })[0];
      if (selectedView != null) {
        this.renderSelected(selectedView);
      }
      return this;
    };

    TabView.prototype.renderSelected = function(model) {
      var view, _base, _ref1;
      if (!model.get('selected')) {
        if ((_ref1 = model.get('view')) != null) {
          _ref1.trigger('tab:blur');
        }
        return;
      }
      if (typeof (_base = model.get('func')) === "function") {
        _base();
      }
      if (model.get('removeFromDOM')) {
        this.$context.contents().detach();
      }
      view = model.get('view');
      if (view != null) {
        this.$context.append(view.render().el);
        return view.trigger('tab:focus');
      }
    };

    TabView.prototype.add = function(obj) {
      return this.collection.add(obj);
    };

    TabView.prototype.reset = function() {
      var objs;
      objs = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return this.collection.reset(objs);
    };

    TabView.prototype.removeAtIndex = function(i) {
      return this.collection.remove(this.collection.at(i));
    };

    TabView.prototype.selectAtIndex = function(i) {
      var _ref1;
      if ((_ref1 = this.collection.where({
        selected: true
      })[0]) != null) {
        _ref1.set({
          selected: false
        });
      }
      return this.collection.at(i).set({
        'selected': true
      });
    };

    return TabView;

  })(Backbone.View);

  BarView = (function(_super) {

    __extends(BarView, _super);

    function BarView() {
      this.render = __bind(this.render, this);
      return BarView.__super__.constructor.apply(this, arguments);
    }

    BarView.prototype.tagName = 'ul';

    BarView.prototype.className = 'jmbo-tab-bar-view';

    BarView.prototype.initialize = function() {
      return this.collection.on('add reset remove', this.render);
    };

    BarView.prototype.render = function() {
      var _this = this;
      this.$el.html('');
      this.collection.each(function(model) {
        return _this.$el.append(new BarItemView({
          model: model
        }).render().el);
      });
      return this;
    };

    return BarView;

  })(Backbone.View);

  BarItemView = (function(_super) {

    __extends(BarItemView, _super);

    function BarItemView() {
      this.select = __bind(this.select, this);

      this.renderSelected = __bind(this.renderSelected, this);

      this.render = __bind(this.render, this);
      return BarItemView.__super__.constructor.apply(this, arguments);
    }

    BarItemView.prototype.tagName = 'li';

    BarItemView.prototype.initialize = function() {
      var tap;
      this.model.on('change:selected', this.renderSelected);
      tap = 'click';
      if (__indexOf.call(document.documentElement, 'ontouchstart') >= 0) {
        tap = 'touchstart';
      }
      return this.$el.on(tap, this.select);
    };

    BarItemView.prototype.render = function() {
      this.$el.html(this.model.get('name')).addClass(this.model.get('icon'));
      return this;
    };

    BarItemView.prototype.renderSelected = function() {
      return this.$el.toggleClass('selected');
    };

    BarItemView.prototype.select = function() {
      var _ref1;
      if (this.model.get('selected') === true) {
        return;
      }
      if ((_ref1 = this.model.collection.where({
        selected: true
      })[0]) != null) {
        _ref1.set({
          selected: false
        });
      }
      return this.model.set({
        selected: true
      });
    };

    return BarItemView;

  })(Backbone.View);

  exports = this;

  exports.Jmbo = exports.Jmbo || {};

  exports.Jmbo.TabView = TabView;

  ListView = (function(_super) {

    __extends(ListView, _super);

    function ListView() {
      this.render = __bind(this.render, this);
      return ListView.__super__.constructor.apply(this, arguments);
    }

    ListView.prototype.className = 'jmbo-list-view';

    ListView.prototype.tagName = 'ol';

    ListView.prototype.initialize = function() {
      return this.collection.on('reset', this.render);
    };

    ListView.prototype.render = function() {
      var _this = this;
      this.$el.html('');
      if (this.collection.length === 0) {
        this.$el.html('<li class="loading">Loading...</li>');
      } else {
        this.collection.each(function(item, index) {
          return _this.$el.append(new ListItemView({
            model: item,
            template: _this.options.itemTemplate
          }).render().el);
        });
      }
      return this;
    };

    return ListView;

  })(Backbone.View);

  ListItemView = (function(_super) {

    __extends(ListItemView, _super);

    function ListItemView() {
      this.select = __bind(this.select, this);

      this.render = __bind(this.render, this);
      return ListItemView.__super__.constructor.apply(this, arguments);
    }

    ListItemView.prototype.className = 'jmbo-list-item-view';

    ListItemView.prototype.tagName = 'li';

    ListItemView.prototype.template = _.template("<%= item.title %>");

    ListItemView.prototype.initialize = function() {
      var tap;
      if (this.options.template != null) {
        this.template = _.template(this.options.template);
      }
      tap = 'click';
      if (__indexOf.call(document.documentElement, 'ontouchstart') >= 0) {
        tap = 'touchstart';
      }
      return this.$el.on(tap, this.select);
    };

    ListItemView.prototype.render = function() {
      this.$el.html(this.template({
        item: this.model.toJSON()
      }));
      return this;
    };

    ListItemView.prototype.select = function() {
      return console.log(this.model);
    };

    return ListItemView;

  })(Backbone.View);

  exports = this;

  exports.Jmbo = (_ref1 = exports.Jmbo) != null ? _ref1 : {};

  exports.Jmbo.ListView = ListView;

  TitleView = (function(_super) {

    __extends(TitleView, _super);

    function TitleView() {
      this.renderAction = __bind(this.renderAction, this);

      this.render = __bind(this.render, this);
      return TitleView.__super__.constructor.apply(this, arguments);
    }

    TitleView.prototype.className = 'jmbo-title-view';

    TitleView.prototype.initialize = function() {};

    TitleView.prototype.render = function() {
      var action, _i, _len, _ref2;
      this.$el.html(this.options.name);
      _ref2 = this.options.actions;
      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
        action = _ref2[_i];
        this.renderAction(action);
      }
      return this;
    };

    TitleView.prototype.renderAction = function(action) {
      var $action;
      $action = $('<div/>').addClass(action.extraClasses).html(action.name).on('click', action.callback);
      return this.$el.append($action);
    };

    return TitleView;

  })(Backbone.View);

  exports = this;

  exports.Jmbo = (_ref2 = exports.Jmbo) != null ? _ref2 : {};

  exports.Jmbo.TitleView = TitleView;

}).call(this);
