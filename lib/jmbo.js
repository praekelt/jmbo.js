// Generated by CoffeeScript 1.3.1
(function() {
  var BarItemView, BarView, Config, Controller, ControllerView, Controllers, TitleView,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  window.namespace = function(target, name, block) {
    var item, top, _i, _len, _ref, _ref1;
    if (arguments.length < 3) {
      _ref = [(typeof exports !== 'undefined' ? exports : window)].concat(__slice.call(arguments)), target = _ref[0], name = _ref[1], block = _ref[2];
    }
    top = target;
    _ref1 = name.split('.');
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      item = _ref1[_i];
      target = target[item] || (target[item] = {});
    }
    return block(target, top);
  };

  window.log = function() {
    var x;
    x = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (x.length === 1) {
      x = x[0];
    }
    return console.log(x);
  };

  TitleView = (function(_super) {

    __extends(TitleView, _super);

    TitleView.name = 'TitleView';

    function TitleView() {
      this.setTitle = __bind(this.setTitle, this);

      this.render = __bind(this.render, this);
      return TitleView.__super__.constructor.apply(this, arguments);
    }

    TitleView.prototype.className = 'jmbo-ui-title-view';

    TitleView.prototype.template = _.template('<h1><%= title %></h1>');

    TitleView.prototype.initialize = function() {
      return this.title = 'Untitled';
    };

    TitleView.prototype.render = function() {
      return this.$el.html(this.template({
        title: this.title
      }));
    };

    TitleView.prototype.setTitle = function(title) {
      return this.title = title;
    };

    return TitleView;

  })(Backbone.View);

  namespace('jmbo.ui', function(exports) {
    exports.TitleView = TitleView;
    return exports.animate = function($el, name, direction, callback) {
      /*
          This function had a race condition problem:
      
          If you added many views to a navigation controller it's possible to add two
          animations to an element at the same time.
      
          The `in` animation would complete and remove the `animationEnd` callback, 
          which would inturn remove the callback for the `out` animation.
      
          So the `out` animation's callback would never fire. I've implemented custom
          events specific to the type of animation. `animationEnd` always fires, and
          triggers a custom event. The custom event can be removed without fear of
          removing any other callbacks.
      */

      var className, customAnimationEvent;
      className = name + '-' + direction;
      customAnimationEvent = 'anim-event-' + className;
      $el.addClass(className);
      $el.on(customAnimationEvent, function() {
        $el.off(customAnimationEvent);
        $el.removeClass(className);
        if (callback) {
          return callback();
        }
      });
      $el.on('webkitAnimationEnd animationEnd', function(e) {
        return $el.trigger(customAnimationEvent);
      });
      if (name === false) {
        return $el.trigger(customAnimationEvent);
      }
    };
  });

  Controller = (function(_super) {

    __extends(Controller, _super);

    Controller.name = 'Controller';

    function Controller() {
      return Controller.__super__.constructor.apply(this, arguments);
    }

    Controller.prototype.defaults = {
      view: void 0
    };

    return Controller;

  })(Backbone.Model);

  Controllers = (function(_super) {

    __extends(Controllers, _super);

    Controllers.name = 'Controllers';

    function Controllers() {
      return Controllers.__super__.constructor.apply(this, arguments);
    }

    Controllers.prototype.model = Controller;

    return Controllers;

  })(Backbone.Collection);

  Config = (function(_super) {

    __extends(Config, _super);

    Config.name = 'Config';

    function Config() {
      return Config.__super__.constructor.apply(this, arguments);
    }

    Config.prototype.defaults = {
      TitleView: jmbo.ui.TitleView,
      view: void 0,
      title: 'Untitled',
      icon: void 0
    };

    return Config;

  })(Backbone.Model);

  ControllerView = (function(_super) {

    __extends(ControllerView, _super);

    ControllerView.name = 'ControllerView';

    function ControllerView() {
      this.animate = __bind(this.animate, this);

      this.firePostRenderEvent = __bind(this.firePostRenderEvent, this);

      this.render = __bind(this.render, this);
      return ControllerView.__super__.constructor.apply(this, arguments);
    }

    ControllerView.prototype.className = 'jmbo-ui-view-controller-view';

    ControllerView.prototype.initialize = function() {
      var view;
      this.config = new Config(this.options);
      view = this.config.get('view');
      if (view != null) {
        return view.controller = this;
      }
    };

    ControllerView.prototype.render = function() {
      var view, viewEl;
      this.$el.html('');
      TitleView = this.config.get('TitleView');
      if (TitleView != null) {
        if (!(this.titleView != null)) {
          this.titleView = new TitleView;
        }
        this.$el.html(this.titleView.render());
        this.titleView.setTitle(this.config.get('title'));
      }
      view = this.config.get('view');
      if (view != null) {
        if (view.render != null) {
          viewEl = view.render();
          $(viewEl).addClass('jmbo-ui-view-controller-view-view');
        } else {
          viewEl = $(view).html();
        }
        this.$el.append(viewEl);
      }
      return this.el;
    };

    ControllerView.prototype.firePostRenderEvent = function() {
      var view;
      view = this.config.get('view');
      view.delegateEvents();
      return view.trigger('render:post');
    };

    ControllerView.prototype.animate = function(name, direction, callback) {
      return jmbo.ui.animate(this.$el, name, direction, callback);
    };

    return ControllerView;

  })(Backbone.View);

  namespace('jmbo.ui.view', function(exports) {
    exports.Controller = Controller;
    exports.Controllers = Controllers;
    return exports.ControllerView = ControllerView;
  });

  ControllerView = (function(_super) {

    __extends(ControllerView, _super);

    ControllerView.name = 'ControllerView';

    function ControllerView() {
      this.pop = __bind(this.pop, this);

      this.push = __bind(this.push, this);

      this.firePostRenderEvent = __bind(this.firePostRenderEvent, this);

      this.render = __bind(this.render, this);
      return ControllerView.__super__.constructor.apply(this, arguments);
    }

    ControllerView.prototype.className = 'jmbo-ui-stack-controller-view';

    ControllerView.prototype.initialize = function() {
      ControllerView.__super__.initialize.apply(this, arguments);
      return this.collection = new jmbo.ui.view.Controllers;
    };

    ControllerView.prototype.render = function() {
      var controller, controllers, view, _i, _len;
      controllers = this.collection.where({
        _cache: true
      });
      controllers.push(this.collection.last());
      this.$el.html('');
      for (_i = 0, _len = controllers.length; _i < _len; _i++) {
        controller = controllers[_i];
        view = controller.get('view');
        this.$el.append(view.render());
      }
      return this.el;
    };

    ControllerView.prototype.firePostRenderEvent = function() {
      var controller, controllers, view, _i, _len, _results;
      controllers = this.collection.where({
        _cache: true
      });
      controllers.push(this.collection.last());
      _results = [];
      for (_i = 0, _len = controllers.length; _i < _len; _i++) {
        controller = controllers[_i];
        view = controller.get('view');
        _results.push(view.firePostRenderEvent());
      }
      return _results;
    };

    ControllerView.prototype.push = function(newView, opts) {
      var controller, currentView, defaultOpts;
      defaultOpts = {
        animation: 'slide-right',
        removeFromDom: true
      };
      opts = _.extend(defaultOpts, opts);
      controller = this.collection.last();
      if (controller != null) {
        currentView = controller.get('view');
        currentView.animate(opts.animation, 'out', function() {
          controller.set('_cache', !opts.removeFromDom);
          if (opts.removeFromDom) {
            return currentView.$el.html('').remove();
          }
        });
      }
      this.collection.add({
        'view': newView
      });
      this.$el.append(newView.render());
      newView.firePostRenderEvent();
      newView.animate(opts.animation, 'in', function() {
        if (opts.callback) {
          return opts.callback();
        }
      });
      return newView;
    };

    ControllerView.prototype.pop = function(opts) {
      var controller, currentView, defaultOptions, newView;
      defaultOptions = {
        animation: 'slide-left'
      };
      opts = _.extend(defaultOptions, opts);
      controller = this.collection.pop();
      if (controller != null) {
        currentView = controller.get('view');
        currentView.animate(opts.animation, 'out', function() {
          currentView.$el.html('').remove();
          if (opts.callback) {
            return opts.callback();
          }
        });
      }
      controller = this.collection.last();
      if (controller != null) {
        newView = controller.get('view');
        if (!controller.get('_cache')) {
          this.$el.append(newView.render());
          newView.firePostRenderEvent();
        }
        newView.animate(opts.animation, 'in');
      }
      return currentView;
    };

    return ControllerView;

  })(jmbo.ui.view.ControllerView);

  namespace('jmbo.ui.stack', function(exports) {
    return exports.ControllerView = ControllerView;
  });

  BarItemView = (function(_super) {

    __extends(BarItemView, _super);

    BarItemView.name = 'BarItemView';

    function BarItemView() {
      this.renderSelected = __bind(this.renderSelected, this);

      this.render = __bind(this.render, this);

      this.select = __bind(this.select, this);
      return BarItemView.__super__.constructor.apply(this, arguments);
    }

    BarItemView.prototype.tagName = 'li';

    BarItemView.prototype.className = 'jmbo-ui-tab-bar-item-view';

    BarItemView.prototype.events = {
      'click': 'select'
    };

    BarItemView.prototype.initialize = function() {
      return this.model.on('change:selected', this.renderSelected);
    };

    BarItemView.prototype.select = function() {
      var controller, _fn, _i, _len, _ref;
      if (this.model.get('selected') === true) {
        return;
      }
      _ref = this.model.collection.where({
        selected: true
      });
      _fn = function() {
        return controller.set({
          selected: false
        });
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        controller = _ref[_i];
        _fn();
      }
      return this.model.set({
        selected: true
      });
    };

    BarItemView.prototype.render = function() {
      var controllerViewConfig, icon;
      controllerViewConfig = this.model.get('view').config;
      this.$el.html(controllerViewConfig.get('title'));
      icon = controllerViewConfig.get('icon');
      if (icon != null) {
        this.$el.append("<div class=\"icon-" + icon + "\"></div>");
      }
      return this.el;
    };

    BarItemView.prototype.renderSelected = function() {
      return this.$el.toggleClass('selected');
    };

    return BarItemView;

  })(Backbone.View);

  BarView = (function(_super) {

    __extends(BarView, _super);

    BarView.name = 'BarView';

    function BarView() {
      this.render = __bind(this.render, this);
      return BarView.__super__.constructor.apply(this, arguments);
    }

    BarView.prototype.tagName = 'ul';

    BarView.prototype.className = 'jmbo-ui-tab-bar-view';

    BarView.prototype.initialize = function() {
      return this.collection.on('reset', this.render);
    };

    BarView.prototype.render = function() {
      var that;
      this.$el.html('');
      that = this;
      this.collection.each(function(model) {
        return that.$el.append(new BarItemView({
          model: model
        }).render());
      });
      return this.el;
    };

    return BarView;

  })(Backbone.View);

  ControllerView = (function(_super) {

    __extends(ControllerView, _super);

    ControllerView.name = 'ControllerView';

    function ControllerView() {
      this.selectedIndex = __bind(this.selectedIndex, this);

      this.set = __bind(this.set, this);

      this.renderSelected = __bind(this.renderSelected, this);

      this.render = __bind(this.render, this);
      return ControllerView.__super__.constructor.apply(this, arguments);
    }

    ControllerView.prototype.className = 'jmbo-ui-tab-controller-view';

    ControllerView.prototype.initialize = function() {
      ControllerView.__super__.initialize.apply(this, arguments);
      this.collection = new jmbo.ui.view.Controllers;
      this.collection.on('change:selected', this.renderSelected);
      return this._selectedIndex = 0;
    };

    ControllerView.prototype.render = function() {
      var bar;
      this.$el.html('<div id="jmbo-ui-tab-controller-view-context"></div>');
      bar = new BarView({
        collection: this.collection
      });
      this.$el.append(bar.render());
      return this.el;
    };

    ControllerView.prototype.renderSelected = function() {
      var controller, controllerView;
      controller = this.collection.where({
        selected: true
      });
      if (controller.length) {
        controllerView = controller[0].get('view');
        this.$el.find('#jmbo-ui-tab-controller-view-context').html(controllerView.render());
        return controllerView.firePostRenderEvent();
      }
    };

    ControllerView.prototype.set = function() {
      var controllerViews, that, view, _fn, _i, _len;
      controllerViews = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      this.collection.reset([], {
        silent: true
      });
      if (controllerViews.length === 0) {
        this.collection.trigger('reset');
        return;
      }
      that = this;
      _fn = function() {
        return that.collection.add({
          view: view,
          selected: false
        }, {
          silent: true
        });
      };
      for (_i = 0, _len = controllerViews.length; _i < _len; _i++) {
        view = controllerViews[_i];
        _fn();
      }
      this.collection.trigger('reset');
      return this.selectedIndex(0);
    };

    ControllerView.prototype.selectedIndex = function(i) {
      var controller, _fn, _i, _len, _ref;
      if (!(i != null)) {
        return i = this._selectedIndex;
      }
      _ref = this.collection.where({
        selected: true
      });
      _fn = function() {
        return controller.set({
          selected: false
        });
      };
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        controller = _ref[_i];
        _fn();
      }
      this.collection.at(i).set({
        selected: true
      });
      return this._selectedIndex = i;
    };

    return ControllerView;

  })(jmbo.ui.view.ControllerView);

  namespace('jmbo.ui.tab', function(exports) {
    exports.ControllerView = ControllerView;
    exports._BarView = BarView;
    return exports._BarItemView = BarItemView;
  });

}).call(this);
